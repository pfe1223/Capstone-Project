I will be using this space to talk about my masters capstone project. The project is, ostensibly, building an app, but it goes a bit deeper than that. As I am tasked with the inaugural year of computer science at my job (I'm a teacher) for the sixth grade students, I have become interested in how kids learn to program. Introduction to programming for kids, based on my experiences and reading up on current practices, does not seem as if it has evolved all that much. When I learned, I started out with Pascal and moved to C++. With each class, the tools I used were "real world" tools. I use quotes because, well, I feel there is a certain amount of hubris about learning to program. It is as if there is machismo in masochism. Learning to program is a rite of passage, and if it is not truly difficult then you are not really learning.

As such, efforts to make programming more accessible to a younger audience is sometimes portrayed as "not really programming." There is a small group of people who have been earnestly working on approaching programming from another perspective. Some of them like Seymour Papert, Alan Kay, and why the lucky stiff were concerned with computers and (formal or informal) education. Others, like Evan Czaplicki, want to simplify the mess that is web development (HTML/CSS/JS) to a singular and more straightforward endeavor.

When I decided to build an app, I wanted to familiarize myself with one of these approaches so that I can better help my students learn to code. Because of this, I will be learning Elm to build a podcast client for the Firefox OS platform. The posts on this site will document the steps that led me to this decision, as well as my triumphs and (many) failures in learning functional reactive programming in general and Elm in particular.